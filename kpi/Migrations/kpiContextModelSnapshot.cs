// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using kpi.Models;

namespace kpi.Migrations
{
    [DbContext(typeof(kpiContext))]
    partial class kpiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("kpi.Models.Agencia", b =>
                {
                    b.Property<int>("IdAgencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Agencia")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreAgencia")
                        .IsRequired()
                        .HasColumnName("Nombre_agencia")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdAgencia")
                        .HasName("PRIMARY");

                    b.ToTable("agencia");
                });

            modelBuilder.Entity("kpi.Models.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Area")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreArea")
                        .IsRequired()
                        .HasColumnName("Nombre_Area")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdArea")
                        .HasName("PRIMARY");

                    b.ToTable("area");
                });

            modelBuilder.Entity("kpi.Models.AreaAgencia", b =>
                {
                    b.Property<int>("IdAreaAgencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Area_Agencia")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdAgencia")
                        .HasColumnName("Id_Agencia")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdArea")
                        .HasColumnName("Id_Area")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdCodigoIndiador")
                        .HasColumnName("Id_CodigoIndiador")
                        .HasColumnType("int(11)");

                    b.HasKey("IdAreaAgencia")
                        .HasName("PRIMARY");

                    b.HasIndex("IdAgencia")
                        .HasName("Id_Agencia_idx");

                    b.HasIndex("IdArea")
                        .HasName("Id_Area_idx");

                    b.HasIndex("IdCodigoIndiador")
                        .HasName("Id_CodigoIndiador_idx");

                    b.ToTable("area_agencia");
                });

            modelBuilder.Entity("kpi.Models.Indicadores", b =>
                {
                    b.Property<int>("IdCodigoIndiador")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_CodigoIndiador")
                        .HasColumnType("int(11)");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("varchar(245)")
                        .HasMaxLength(245);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(75)")
                        .HasMaxLength(75);

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("varchar(245)")
                        .HasMaxLength(245);

                    b.Property<int>("IdSubobjetivos")
                        .HasColumnName("Id_subobjetivos")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdTiempo")
                        .HasColumnName("Id_Tiempo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreIndicador")
                        .IsRequired()
                        .HasColumnName("Nombre_Indicador")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Proceso")
                        .IsRequired()
                        .HasColumnType("varchar(225)")
                        .HasMaxLength(225);

                    b.Property<string>("Responsables")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdCodigoIndiador")
                        .HasName("PRIMARY");

                    b.HasIndex("IdSubobjetivos")
                        .HasName("Id_subobjetivos_idx");

                    b.HasIndex("IdTiempo")
                        .HasName("Id_Tiempo_idx");

                    b.ToTable("indicadores");
                });

            modelBuilder.Entity("kpi.Models.Logrado", b =>
                {
                    b.Property<int>("IdCodigoIndiador")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_CodigoIndiador")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdAreaAgencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Area_Agencia")
                        .HasColumnType("int(11)");

                    b.Property<string>("Logrado1")
                        .IsRequired()
                        .HasColumnName("Logrado")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("PorcentajeCumplimiento")
                        .IsRequired()
                        .HasColumnName("Porcentaje_Cumplimiento")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdCodigoIndiador")
                        .HasName("PRIMARY");

                    b.HasIndex("IdAreaAgencia")
                        .HasName("Id_Area_Agencia_idx");

                    b.ToTable("logrado");
                });

            modelBuilder.Entity("kpi.Models.Meta", b =>
                {
                    b.Property<int>("IdCodigoIndiador")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_CodigoIndiador")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdAreaAgencia")
                        .HasColumnName("Id_Area_Agencia")
                        .HasColumnType("int(11)");

                    b.HasKey("IdCodigoIndiador")
                        .HasName("PRIMARY");

                    b.HasIndex("IdAreaAgencia")
                        .HasName("Id_Area_Agencia_idx");

                    b.HasIndex("IdCodigoIndiador")
                        .HasName("Id_Area_idx");

                    b.HasIndex("IdAreaAgencia", "IdCodigoIndiador")
                        .HasName("Id_Area_Agencia_idx1");

                    b.ToTable("meta");
                });

            modelBuilder.Entity("kpi.Models.Objetivo", b =>
                {
                    b.Property<int>("IdObjetivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_Objetivo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreObjetivo")
                        .IsRequired()
                        .HasColumnName("Nombre_objetivo")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<float>("PorcentajeObjetivo")
                        .HasColumnName("Porcentaje_Objetivo")
                        .HasColumnType("float");

                    b.HasKey("IdObjetivo")
                        .HasName("PRIMARY");

                    b.ToTable("objetivo");

                    b.HasComment("Tabla para registrar objetivos");
                });

            modelBuilder.Entity("kpi.Models.Subobjetivos", b =>
                {
                    b.Property<int>("IdSubobjetivos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_subobjetivos")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdArea")
                        .HasColumnName("Id_Area")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdObjetivo")
                        .HasColumnName("Id_Objetivo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreSubobjetivo")
                        .IsRequired()
                        .HasColumnName("Nombre_Subobjetivo")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("SubObjetivo")
                        .IsRequired()
                        .HasColumnName("% SubObjetivo")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdSubobjetivos")
                        .HasName("PRIMARY");

                    b.HasIndex("IdArea")
                        .HasName("Id_Area_idx");

                    b.HasIndex("IdObjetivo")
                        .HasName("Id_Objetivo_idx");

                    b.ToTable("subobjetivos");
                });

            modelBuilder.Entity("kpi.Models.SubojetivoArea", b =>
                {
                    b.Property<int>("IdSubobjetivos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_subobjetivos")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdArea")
                        .HasColumnName("Id_Area")
                        .HasColumnType("int(11)");

                    b.HasKey("IdSubobjetivos")
                        .HasName("PRIMARY");

                    b.HasIndex("IdArea")
                        .HasName("Id_Area_idx");

                    b.ToTable("subojetivo_area");
                });

            modelBuilder.Entity("kpi.Models.Tiempo", b =>
                {
                    b.Property<int>("IdTiempo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Tiempo")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombrePeriodo")
                        .IsRequired()
                        .HasColumnName("Nombre_Periodo")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdTiempo")
                        .HasName("PRIMARY");

                    b.ToTable("tiempo");
                });

            modelBuilder.Entity("kpi.Models.Tokens", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Id_Usuario")
                        .HasColumnType("int");

                    b.Property<string>("JwtId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<bool?>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserIdUsuario")
                        .HasColumnType("int(11)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserIdUsuario");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("kpi.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_Usuario")
                        .HasColumnType("int(11)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<int>("IdAgencia")
                        .HasColumnName("Id_Agencia")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdArea")
                        .HasColumnName("Id_Area")
                        .HasColumnType("int(11)");

                    b.Property<string>("UsuarioTipo")
                        .IsRequired()
                        .HasColumnName("Usuario_Tipo")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdUsuario")
                        .HasName("PRIMARY");

                    b.HasIndex("IdAgencia")
                        .HasName("ID_Agencia_idx");

                    b.HasIndex("IdArea")
                        .HasName("Id_Area_idx");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("kpi.Models.AreaAgencia", b =>
                {
                    b.HasOne("kpi.Models.Agencia", "IdAgenciaNavigation")
                        .WithMany("AreaAgencia")
                        .HasForeignKey("IdAgencia")
                        .HasConstraintName("Id_Agencia_FK")
                        .IsRequired();

                    b.HasOne("kpi.Models.Area", "IdAreaNavigation")
                        .WithMany("AreaAgencia")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("Id_Area_FK")
                        .IsRequired();

                    b.HasOne("kpi.Models.Indicadores", "IdCodigoIndiadorNavigation")
                        .WithMany("AreaAgencia")
                        .HasForeignKey("IdCodigoIndiador")
                        .HasConstraintName("Id_CodigoIndiador_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("kpi.Models.Indicadores", b =>
                {
                    b.HasOne("kpi.Models.Subobjetivos", "IdSubobjetivosNavigation")
                        .WithMany("Indicadores")
                        .HasForeignKey("IdSubobjetivos")
                        .HasConstraintName("Id_subobjetivos")
                        .IsRequired();

                    b.HasOne("kpi.Models.Tiempo", "IdTiempoNavigation")
                        .WithMany("Indicadores")
                        .HasForeignKey("IdTiempo")
                        .HasConstraintName("Id_Tiempo")
                        .IsRequired();
                });

            modelBuilder.Entity("kpi.Models.Logrado", b =>
                {
                    b.HasOne("kpi.Models.AreaAgencia", "IdAreaAgenciaNavigation")
                        .WithMany("Logrado")
                        .HasForeignKey("IdAreaAgencia")
                        .HasConstraintName("Id_Area_Agencia")
                        .IsRequired();
                });

            modelBuilder.Entity("kpi.Models.Meta", b =>
                {
                    b.HasOne("kpi.Models.AreaAgencia", "IdAreaAgenciaNavigation")
                        .WithMany("Meta")
                        .HasForeignKey("IdAreaAgencia")
                        .HasConstraintName("Id_Area_Agencia_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("kpi.Models.Subobjetivos", b =>
                {
                    b.HasOne("kpi.Models.Area", "IdAreaNavigation")
                        .WithMany("Subobjetivos")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("Id_Area")
                        .IsRequired();

                    b.HasOne("kpi.Models.Objetivo", "IdObjetivoNavigation")
                        .WithMany("Subobjetivos")
                        .HasForeignKey("IdObjetivo")
                        .HasConstraintName("Id_Objetivo")
                        .IsRequired();
                });

            modelBuilder.Entity("kpi.Models.SubojetivoArea", b =>
                {
                    b.HasOne("kpi.Models.Area", "IdAreaNavigation")
                        .WithMany("SubojetivoArea")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("Id_Area_FKK")
                        .IsRequired();
                });

            modelBuilder.Entity("kpi.Models.Tokens", b =>
                {
                    b.HasOne("kpi.Models.Usuario", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUsuario");
                });

            modelBuilder.Entity("kpi.Models.Usuario", b =>
                {
                    b.HasOne("kpi.Models.Agencia", "IdAgenciaNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdAgencia")
                        .HasConstraintName("Id_Agencia")
                        .IsRequired();

                    b.HasOne("kpi.Models.Area", "IdAreaNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("Idarea")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
